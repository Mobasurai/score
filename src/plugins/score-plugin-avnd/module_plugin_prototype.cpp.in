module;
// clang-format off
#include <score/application/ApplicationContext.hpp>
#include <score/plugins/Interface.hpp>
#include <score/plugins/qt_interfaces/FactoryInterface_QtInterface.hpp>
#include <score/plugins/qt_interfaces/PluginRequirements_QtInterface.hpp>
#include <score/application/ApplicationContext.hpp>
#include <score/plugins/Interface.hpp>
#include <score/plugins/qt_interfaces/FactoryInterface_QtInterface.hpp>
#include <score/plugins/qt_interfaces/PluginRequirements_QtInterface.hpp>

#include <score_plugin_engine.hpp>
#include <score/plugins/FactorySetup.hpp>
#include <concurrentqueue.h>

#include <Avnd/Factories.hpp>
export module @AVND_BASE_TARGET@;

@AVND_ADDITIONAL_CLASSES@

class @AVND_BASE_TARGET@ final
  : public score::FactoryInterface_QtInterface
  , public score::Plugin_QtInterface
{
  SCORE_PLUGIN_METADATA(@AVND_PLUGIN_VERSION@, "@AVND_PLUGIN_UUID@")
public:
  @AVND_BASE_TARGET@();
  ~@AVND_BASE_TARGET@() override;
private:
  std::vector<score::InterfaceBase*> factories(
          const score::ApplicationContext& ctx,
          const score::InterfaceKey& key) const override;
  std::vector<score::PluginKey> required() const override;
};

@AVND_BASE_TARGET@::@AVND_BASE_TARGET@() = default;
@AVND_BASE_TARGET@::~@AVND_BASE_TARGET@() = default;

std::vector<score::InterfaceBase*> @AVND_BASE_TARGET@::factories(
        const score::ApplicationContext& ctx,
        const score::InterfaceKey& key) const
{
  std::vector<score::InterfaceBase*> fx;

  @AVND_CUSTOM_FACTORIES@

  return fx;
}

std::vector<score::PluginKey> @AVND_BASE_TARGET@::required() const
{
  return {score_plugin_engine::static_key()};
}

#include <score/plugins/PluginInstances.hpp>
SCORE_EXPORT_PLUGIN(@AVND_BASE_TARGET@)
